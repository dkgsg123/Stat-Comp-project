{"chunk_definitions":[{"row":32,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"setup","include":false,"dev":"png"},"document_id":"2927E82D","chunk_id":"csetup_chunk","chunk_label":"setup"},{"row":38,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","code":["#' Ken Deng, s2617343","#' Add your own function definitions on this file.","","#' neg_log_lik","#","#' @description Evaluate the negated log-likelihood for model A and B","#' @param beta A vector with the beta parameters","#' @param data A `data.frame` with the same variables as the `filament1` data set.","#' Must have columns `CAD_Weight` and `Actual_Weight`","#' @param model Either \"A\" for a log-linear variance model, or \"B\" for a proportional","#' scaling error model","","neg_log_lik <- function(beta, data, model) {","  mu <- beta[1] + beta[2] * data[[\"CAD_Weight\"]]","","  # distinguish between the two models to find the particular standard deviation for the betas","  if (model == \"A\") {","    sigma <- sqrt(exp(beta[3] + beta[4] * data[[\"CAD_Weight\"]]))","  } else {","    sigma <- sqrt(exp(beta[3]) + exp(beta[4]) * (data[[\"CAD_Weight\"]]^2))","  }","  -sum(dnorm(data[[\"Actual_Weight\"]],","    mean = mu,","    sd = sigma,","    log = TRUE","  ))","}","","#' filament_estimate","#","#' @description Estimate filament models with different variance structure","#' @param data A `data.frame` with the same variables as the `filament1` data set.","#' Must have columns `CAD_Weight` and `Actual_Weight`","#' @param model Either \"A\" for a log-linear variance model, or \"B\" for a proportional","#' scaling error model","#' @return An estimation object suitable for use with [filament1_predict()]","","filament1_estimate <- function(data, model) {","  model <- match.arg(model, c(\"A\", \"B\"))","  if (model == \"A\") {","    beta_start <- c(-0.1, 1.07, -2, 0.05)","  } else {","    beta_start <- c(-0.15, 1.07, -13.5, -6.5)","  }","  opt <- optim(beta_start,","    neg_log_lik,","    data = data,","    model = model,","    hessian = TRUE,","    method = \"Nelder-Mead\",","    control = list(maxit = 5000)","  )","  fit <- list(","    model = model,","    par = opt$par,","    hessian = opt$hessian","  )","  class(fit) <- c(\"filament1_estimate\", \"list\")","  fit # betahat and SEbetahat","}","","#' filament1_aux_EV","#'","#' @description Evaluate the expectation and variance for model A and B","#' @param beta A vector with the beta parameters","#' @param data A `data.frame` containing the required predictors, including `CAD_Weight`","#' @param model Either \"A\" for a log-linear variance model, or \"B\" for a proportional","#' scaling error model","#' @param Sigma_beta : If not NULL, an estimate of the covariance matrix for","#                 the uncertainty of estimated betas","#' @return A list with four elements:","#     E : E(y|beta,x)","#     V : Var(y|beta,x)","#     VE : Var(E(y|beta,x)|x) or NULL","#     EV : E(Var(y|beta,x)|x) or NULL","","filament1_aux_EV <- function(beta, data, model = c(\"A\", \"B\"),","                             Sigma_beta = NULL) {","  model <- match.arg(model)","  if (model == \"A\") {","    ZE.0 <- model.matrix(~ 1 + CAD_Weight, data = data) # X","    ZV.0 <- model.matrix(~ 1 + CAD_Weight, data = data) # X","    ZE <- cbind(ZE.0, ZV.0 * 0) # [X, 0]","    ZV <- cbind(ZE.0 * 0, ZV.0) # [0, X]","","    VE <- EV <- NULL","    if (!is.null(Sigma_beta)) {","      # E(Var(y|beta,x)|x)","      EV <- exp(ZV %*% beta + rowSums(ZV * (ZV %*% Sigma_beta)) / 2)","      # Var(E(y|beta,x)|x)","      VE <- rowSums(ZE * (ZE %*% Sigma_beta))","    }","    out <- list(","      E = ZE %*% beta, # [X, 0] %*% betahat --- muhat_i","      V = exp(ZV %*% beta), # exp([0, X] %*% betahat) --- sigmahat_i residual variance","      VE = VE,","      EV = EV","    )","  } else { # model B","","    ZE.0 <- model.matrix(~ 1 + CAD_Weight, data = data) # X","    ZV.0 <- model.matrix(~ 1 + I(CAD_Weight^2), data = data) # X","    ZE <- cbind(ZE.0, ZV.0 * 0)","    ZV <- cbind(ZE.0 * 0, ZV.0)","","    VE <- EV <- NULL","    if (!is.null(Sigma_beta)) {","      # E(Var(y|beta,x)|x)","      # (pmin: Ignore large Sigma_beta values)","      EV <- ZV %*% exp(beta + pmin(0.5^2, diag(Sigma_beta)) / 2)","      # Var(E(y|beta,x)|x)","      VE <- rowSums(ZE * (ZE %*% Sigma_beta))","    }","    out <- list(","      E = ZE %*% beta,","      V = ZV %*% exp(beta),","      VE = VE,","      EV = EV","    )","  }","  out # hat E() and hat Var(), hat Var() of hat mu for each y_i","}","","","# myfunc1","filament1_predict <- function(data, model, newdata) { # use my func","","  # fit the model","  fit0 <- filament1_estimate(data, model)","","  # fit and predict new data","  pred0 <- filament1_aux_EV(fit0$par, newdata, model, Sigma_beta = solve(fit0$hessian))","","  mean <- pred0$E","  sd <- sqrt(pred0$V)","  sd.pred <- sqrt(pred0$EV + pred0$VE)","","  q <- qt(1 - 0.05 / 2, df = Inf) # z","  lwr <- mean - q * sd.pred","  upr <- mean + q * sd.pred","","  # return","  data.frame(","    mean = mean, sd = sd,","    lwr = lwr, upr = upr","  )","}","","# myfunc2","leave1out <- function(data, model) {","  n <- nrow(data)","  mean <- numeric(n)","  sd <- numeric(n)","","  for (i in 1:n) {","    leave_1_out_data <- data[-i, ]","","    fit0 <- filament1_estimate(leave_1_out_data, model)","","    pred0 <- filament1_aux_EV(fit0$par, data[i, ], model)","","    mean[i] <- pred0$E # meanhat of new data","","    sd[i] <- sqrt(pred0$V) # sdhat of error_i","  }","","  result <- data.frame(","    mean = mean, sd = sd","  )","","  score <- cbind(data, result) %>%","    mutate(","      se = (Actual_Weight - mean)^2,","      ds = (Actual_Weight - mean)^2 / sd^2 + 2 * log(sd)","    )","","  score","}","","# myfunc3","arch_loglike <- function(Y, params) {","  -lgamma(Y[1] + 1) - lgamma(Y[2] + 1) - lgamma(params$N - Y[1] + 1) - lgamma(params$N - Y[2] + 1) +","    2 * lgamma(params$N + 1) + (Y[1] + Y[2]) * log(params$Phi) + (2 * params$N - Y[1] - Y[2]) * log(1 - params$Phi)","}","","# myfunc4","estimate <- function(y, xi, a, b, K) {","  # set up params","  N <- rgeom(K, xi)","  Phi <- rbeta(K, a, b)","  params <- data.frame(N = N, Phi = Phi)","","  dens_y <- 1 / (K) * (sum(exp(arch_loglike(Y = y, params = params))))","","  expec_N <- 1 / (K * dens_y) * (sum(N * exp(arch_loglike(Y = y, params = params))))","","  expec_Phi <- 1 / (K * dens_y) * (sum(Phi * exp(arch_loglike(Y = y, params = params))))","","  data.frame(dens_y = dens_y, expec_N = expec_N, expec_Phi = expec_Phi)","}"],"eval":true,"echo":false,"results":"hide","label":"unnamed-chunk-1","dev":"png"},"document_id":"2927E82D","chunk_id":"c159h30mvtbvd","chunk_label":"unnamed-chunk-1"},{"row":46,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-2","dev":"png"},"document_id":"2927E82D","chunk_id":"cjs9tjh3w7k4o","chunk_label":"unnamed-chunk-2"},{"row":91,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-3","dev":"png"},"document_id":"2927E82D","chunk_id":"cdx8wdfzjdcgk","chunk_label":"unnamed-chunk-3"},{"row":99,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","echo":false,"fig.width":6,"fig.height":4,"fig.align":"center","label":"unnamed-chunk-4","dev":"png"},"document_id":"2927E82D","chunk_id":"clyounoacjnre","chunk_label":"unnamed-chunk-4"},{"row":107,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","echo":false,"fig.width":6,"fig.height":4,"fig.align":"center","label":"unnamed-chunk-5","dev":"png"},"document_id":"2927E82D","chunk_id":"cke9dvbc8imj4","chunk_label":"unnamed-chunk-5"},{"row":134,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-6","dev":"png"},"document_id":"2927E82D","chunk_id":"c9jneq49s8usp","chunk_label":"unnamed-chunk-6"},{"row":148,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-7","dev":"png"},"document_id":"2927E82D","chunk_id":"cinewrp1vrdxe","chunk_label":"unnamed-chunk-7"},{"row":163,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-8","dev":"png"},"document_id":"2927E82D","chunk_id":"c8u49futbmphl","chunk_label":"unnamed-chunk-8"},{"row":173,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","fig.width":6,"fig.height":4,"fig.align":"center","label":"unnamed-chunk-9","dev":"png"},"document_id":"2927E82D","chunk_id":"cvlju510bo00o","chunk_label":"unnamed-chunk-9"},{"row":183,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","fig.width":6,"fig.height":4,"fig.align":"center","label":"unnamed-chunk-10","dev":"png"},"document_id":"2927E82D","chunk_id":"c8uc3fdhqzdwb","chunk_label":"unnamed-chunk-10"},{"row":226,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-11","dev":"png"},"document_id":"2927E82D","chunk_id":"cc032k0odk0j7","chunk_label":"unnamed-chunk-11"},{"row":250,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-21","dev":"png"},"document_id":"2927E82D","chunk_id":"c5doumfan6v80","chunk_label":"unnamed-chunk-12"},{"row":280,"row_count":1,"visible":true,"expansion_state":0,"options":{"engine":"r","label":"unnamed-chunk-20","dev":"png"},"document_id":"2927E82D","chunk_id":"cm4b1edddkim2","chunk_label":"unnamed-chunk-13"}],"doc_write_time":1712094969,"working_dir":null,"default_chunk_options":{"echo":true,"eval":true}}