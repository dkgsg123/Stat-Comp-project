z_value <- qnorm(1 - alpha / 2)
fit_A = filament1_estimate(filament1, "A")
se_A <- sqrt(diag(solve(fit_A$hessian)))
lower_A <- fit_A$optimal - z_value * se_A
upper_A <- fit_A$optimal + z_value * se_A
width_A <- upper_A - lower_A
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal, Lower = lower_A, Upper = upper_A, Width = width_A)
knitr::kable(CIs_A)
fit_B = filament1_estimate(filament1, "B")
se_B <- sqrt(diag(solve(fit_B$hessian)))
lower_B <- fit_B$optimal - z_value * se_B
upper_B <- fit_B$optimal + z_value * se_B
width_B <- upper_B - lower_B
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal, Lower = lower_B, Upper = upper_B, Width = width_B)
knitr::kable(CIs_B)
params <- rep(1, 4)
theta0 <- numeric(4)
fit_theta <- posterior_mode(theta0, x = filament1$CAD_Weight, y = filament1$Actual_Weight, params = params)
print(fit_theta)
print(exp(fit_theta$mode[3:4]))
N <- 10000
IS <- do_importance(N, fit_theta$mode, fit_theta$S, filament1$CAD_Weight, filament1$Actual_Weight, params)
print(IS[1:20, ])
print(sum(exp(IS$log_weights)))
IS.long <- pivot_longer(IS, starts_with("beta"), names_to = "name", values_to = "value")
ggplot(IS.long, aes(value)) +
stat_ewcdf(aes(weights = exp(log_weights), color = "Weighted"), geom = "step") +
stat_ecdf(aes(color = "Unweighted"), geom = "step") +
scale_color_manual(values = c("red", "blue"),
labels = c("Weighted", "Unweighted"),
guide = guide_legend(title = "ECDF Type")) +
facet_wrap(vars(name), scales = "free_x") +
theme(panel.spacing = unit(0.8, "lines")) +
labs(title = "ECDF of parameters with and without weights",
x = "Parameter Value",
y = "Cumulative Probability")
IS.grouped <- group_by(IS.long, name)
PIs <- summarise(IS.grouped,
lower = make_CI(value, exp(log_weights), c(0.05, 0.95))$lower,
upper = make_CI(value, exp(log_weights), c(0.05, 0.95))$upper)
print(PIs)
ggplot(IS.long, aes(x = value, y = log_weights, color = name)) +
geom_point() +
facet_wrap(vars(name), scales = "free") +
labs(x = "Parameter Value", y = "Log-Weights", title = "Importance Sampling Log-Weights Distribution")
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal, Lower = lower_B, Upper = upper_B, Width = width_B)
knitr::kable(CIs_B)
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal, Lower = lower_A, Upper = upper_A, Width = width_A)
knitr::kable(CIs_A)
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
N <- 10000
IS <- do_importance(N, fit_theta$mode, fit_theta$S, filament1$CAD_Weight, filament1$Actual_Weight, params)
# print(IS[1:20, ])
# Modify this setup code chunk to set options
# or add extra packages etc if needed.
# See the project instructions for more details
# on what code to show, and where/how.
# Set default code chunk options
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE
)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(mvtnorm))
theme_set(theme_bw())
# To give the same random number sequence every time the document is knit:ed,
# making it easier to discuss the specific numbers in the text:
set.seed(12345L)
# Do not change this code chunk
# Load function definitions
source("code.R")
load("filament1.rda")
any(is.na(filament1))
summary(filament1[, 4:5])
material.freq <- filament1 %>%
group_by(Material) %>%
summarise(freq = n()) %>%
mutate(percent = freq / sum(freq) * 100)
ggplot(material.freq, aes(x = "", y = freq, fill = Material, label = paste0(round(percent), "%"))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5)) +
theme_void() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Pie Chart of Material", fill = "Material")
ggplot(filament1, aes(x = CAD_Weight, y = Actual_Weight)) +
geom_point(color = "blue") +
labs(title = "CAD Weight vs. Actual Weight", x = "CAD Weight", y = "Actual Weight")
cor(filament1[, 4:5])
ggplot(filament1, aes(x = Material, y = CAD_Weight, fill = Material)) +
geom_boxplot() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Boxplot of CAD Weight by Material", x = "Material", y = "CAD Weight")
anova <- aov(CAD_Weight ~ Material, data = filament1)
summary(anova)
fit_A = filament1_estimate(data = filament1, model = "A")
print(fit_A)
fit_B = filament1_estimate(data = filament1, model = "B")
print(fit_B)
alpha <- 0.1
z_value <- qnorm(1 - alpha / 2)
fit_A = filament1_estimate(filament1, "A")
se_A <- sqrt(diag(solve(fit_A$hessian)))
lower_A <- fit_A$optimal - z_value * se_A
upper_A <- fit_A$optimal + z_value * se_A
width_A <- upper_A - lower_A
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal, Lower = lower_A, Upper = upper_A, Width = width_A)
knitr::kable(CIs_A)
fit_B = filament1_estimate(filament1, "B")
se_B <- sqrt(diag(solve(fit_B$hessian)))
lower_B <- fit_B$optimal - z_value * se_B
upper_B <- fit_B$optimal + z_value * se_B
width_B <- upper_B - lower_B
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal, Lower = lower_B, Upper = upper_B, Width = width_B)
knitr::kable(CIs_B)
params <- rep(1, 4)
theta0 <- numeric(4)
fit_theta <- posterior_mode(theta0, x = filament1$CAD_Weight, y = filament1$Actual_Weight, params = params)
print(fit_theta)
exp(fit_theta$mode[3:4])
N <- 10000
IS <- do_importance(N, fit_theta$mode, fit_theta$S, filament1$CAD_Weight, filament1$Actual_Weight, params)
print(IS[1:10, ])
sum(exp(IS$log_weights))
IS.long <- pivot_longer(IS, starts_with("beta"), names_to = "name", values_to = "value")
ggplot(IS.long, aes(value)) +
stat_ewcdf(aes(weights = exp(log_weights), color = "Weighted"), geom = "step") +
stat_ecdf(aes(color = "Unweighted"), geom = "step") +
scale_color_manual(values = c("red", "blue"),
labels = c("Weighted", "Unweighted"),
guide = guide_legend(title = "ECDF Type")) +
facet_wrap(vars(name), scales = "free_x") +
theme(panel.spacing = unit(0.8, "lines")) +
labs(title = "ECDF of parameters with and without weights",
x = "Parameter Value",
y = "Cumulative Probability")
IS.grouped <- group_by(IS.long, name) # 4 groups
PIs <- summarise(IS.grouped,
lower = make_CI(value, exp(log_weights), c(0.05, 0.95))$lower,
upper = make_CI(value, exp(log_weights), c(0.05, 0.95))$upper)
print(PIs)
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
ggplot(IS.long, aes(x = value, y = log_weights, color = name)) +
geom_point() +
facet_wrap(vars(name), scales = "free") +
labs(x = "Parameter Value", y = "Log-Weights", title = "Importance Sampling Log-Weights Distribution")
View(filament1)
ggplot(filament1, aes(x = Material, y = CAD_Weight, fill = Material)) +
geom_boxplot() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Boxplot of CAD Weight by Material", x = "Material", y = "CAD Weight")
cor(filament1[, c("CAD_Weight", "Actual_Weight")])
?qt
# Modify this setup code chunk to set options
# or add extra packages etc if needed.
# See the project instructions for more details
# on what code to show, and where/how.
# Set default code chunk options
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE
)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(mvtnorm))
theme_set(theme_bw())
# To give the same random number sequence every time the document is knit:ed,
# making it easier to discuss the specific numbers in the text:
set.seed(12345L)
# Do not change this code chunk
# Load function definitions
source("code.R")
load("filament1.rda")
any(is.na(filament1))
summary(filament1[, c("CAD_Weight", "Actual_Weight")])
material.freq <- filament1 %>%
group_by(Material) %>%
summarise(freq = n()) %>%
mutate(percent = freq / sum(freq) * 100)
ggplot(material.freq, aes(x = "", y = freq, fill = Material, label = paste0(round(percent), "%"))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5)) +
theme_void() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Pie Chart of Material", fill = "Material")
ggplot(filament1, aes(x = CAD_Weight, y = Actual_Weight)) +
geom_point(color = "blue") +
labs(title = "CAD Weight vs. Actual Weight", x = "CAD Weight", y = "Actual Weight")
cor(filament1[, c("CAD_Weight", "Actual_Weight")])
ggplot(filament1, aes(x = Material, y = CAD_Weight, fill = Material)) +
geom_boxplot() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Boxplot of CAD Weight by Material", x = "Material", y = "CAD Weight")
anova <- aov(CAD_Weight ~ Material, data = filament1)
summary(anova)
fit_A = filament1_estimate(data = filament1, model = "A")
print(fit_A)
fit_B = filament1_estimate(data = filament1, model = "B")
print(fit_B)
alpha <- 0.1
t_value <- qt(1 - alpha / 2, 82)
fit_A = filament1_estimate(filament1, "A")
se_A <- sqrt(diag(solve(fit_A$hessian)))
lower_A <- fit_A$optimal - t_value * se_A
upper_A <- fit_A$optimal + t_value * se_A
width_A <- upper_A - lower_A
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal, Lower = lower_A, Upper = upper_A, Width = width_A)
knitr::kable(CIs_A)
fit_B = filament1_estimate(filament1, "B")
se_B <- sqrt(diag(solve(fit_B$hessian)))
lower_B <- fit_B$optimal - t_value * se_B
upper_B <- fit_B$optimal + t_value * se_B
width_B <- upper_B - lower_B
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal, Lower = lower_B, Upper = upper_B, Width = width_B)
knitr::kable(CIs_B)
params <- rep(1, 4)
theta0 <- numeric(4)
fit_theta <- posterior_mode(theta0, x = filament1$CAD_Weight, y = filament1$Actual_Weight, params = params)
print(fit_theta)
exp(fit_theta$mode[3:4])
N <- 10000
IS <- do_importance(N, fit_theta$mode, fit_theta$S, filament1$CAD_Weight, filament1$Actual_Weight, params)
print(IS[1:10, ])
sum(exp(IS$log_weights))
IS.long <- pivot_longer(IS, starts_with("beta"), names_to = "name", values_to = "value")
ggplot(IS.long, aes(value)) +
stat_ewcdf(aes(weights = exp(log_weights), color = "Weighted"), geom = "step") +
stat_ecdf(aes(color = "Unweighted"), geom = "step") +
scale_color_manual(values = c("red", "blue"),
labels = c("Weighted", "Unweighted"),
guide = guide_legend(title = "ECDF Type")) +
facet_wrap(vars(name), scales = "free_x") +
theme(panel.spacing = unit(0.8, "lines")) +
labs(title = "ECDF of parameters with and without weights",
x = "Parameter Value",
y = "Cumulative Probability")
IS.grouped <- group_by(IS.long, name) # 4 groups
PIs <- summarise(IS.grouped,
lower = make_CI(value, exp(log_weights), c(0.05, 0.95))$lower,
upper = make_CI(value, exp(log_weights), c(0.05, 0.95))$upper)
print(PIs)
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
ggplot(IS.long, aes(x = value, y = log_weights, color = name)) +
geom_point() +
facet_wrap(vars(name), scales = "free") +
labs(x = "Parameter Value", y = "Log-Weights", title = "Importance Sampling Log-Weights Distribution")
exp(-6)
exp(-6)*100*100
exp(-6)*35*35
# Modify this setup code chunk to set options
# or add extra packages etc if needed.
# See the project instructions for more details
# on what code to show, and where/how.
# Set default code chunk options
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE
)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(mvtnorm))
theme_set(theme_bw())
# To give the same random number sequence every time the document is knit:ed,
# making it easier to discuss the specific numbers in the text:
set.seed(12345L)
# Do not change this code chunk
# Load function definitions
source("code.R")
load("filament1.rda")
any(is.na(filament1))
summary(filament1[, c("CAD_Weight", "Actual_Weight")])
material.freq <- filament1 %>%
group_by(Material) %>%
summarise(freq = n()) %>%
mutate(percent = freq / sum(freq) * 100)
ggplot(material.freq, aes(x = "", y = freq, fill = Material, label = paste0(round(percent), "%"))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5)) +
theme_void() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Pie Chart of Material", fill = "Material")
ggplot(filament1, aes(x = CAD_Weight, y = Actual_Weight)) +
geom_point(color = "blue") +
labs(title = "CAD Weight vs. Actual Weight", x = "CAD Weight", y = "Actual Weight")
cor(filament1[, c("CAD_Weight", "Actual_Weight")])
ggplot(filament1, aes(x = Material, y = CAD_Weight, fill = Material)) +
geom_boxplot() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Boxplot of CAD Weight by Material", x = "Material", y = "CAD Weight")
anova <- aov(CAD_Weight ~ Material, data = filament1)
summary(anova)
fit_A = filament1_estimate(data = filament1, model = "A")
print(fit_A)
fit_B = filament1_estimate(data = filament1, model = "B")
print(fit_B)
alpha <- 0.1
t_value <- qt(1 - alpha / 2, 82)
fit_A = filament1_estimate(filament1, "A")
se_A <- sqrt(diag(solve(fit_A$hessian)))
lower_A <- fit_A$optimal - t_value * se_A
upper_A <- fit_A$optimal + t_value * se_A
width_A <- upper_A - lower_A
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal, Lower = lower_A, Upper = upper_A, Width = width_A)
knitr::kable(CIs_A)
fit_B = filament1_estimate(filament1, "B")
se_B <- sqrt(diag(solve(fit_B$hessian)))
lower_B <- fit_B$optimal - t_value * se_B
upper_B <- fit_B$optimal + t_value * se_B
width_B <- upper_B - lower_B
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal, Lower = lower_B, Upper = upper_B, Width = width_B)
knitr::kable(CIs_B)
params <- rep(1, 4)
theta0 <- numeric(4)
fit_theta <- posterior_mode(theta0, x = filament1$CAD_Weight, y = filament1$Actual_Weight, params = params)
print(fit_theta)
N <- 10000
IS <- do_importance(N, fit_theta$mode, fit_theta$S, filament1$CAD_Weight, filament1$Actual_Weight, params)
print(IS[1:10, ])
sum(exp(IS$log_weights))
IS.long <- pivot_longer(IS, starts_with("beta"), names_to = "name", values_to = "value")
ggplot(IS.long, aes(value)) +
stat_ewcdf(aes(weights = exp(log_weights), color = "Weighted"), geom = "step") +
stat_ecdf(aes(color = "Unweighted"), geom = "step") +
scale_color_manual(values = c("red", "blue"),
labels = c("Weighted", "Unweighted"),
guide = guide_legend(title = "ECDF Type")) +
facet_wrap(vars(name), scales = "free_x") +
theme(panel.spacing = unit(0.8, "lines")) +
labs(title = "ECDF of parameters with and without weights",
x = "Parameter Value",
y = "Cumulative Probability")
IS.grouped <- group_by(IS.long, name) # 4 groups
PIs <- summarise(IS.grouped,
lower = make_CI(value, exp(log_weights), c(0.05, 0.95))$lower,
upper = make_CI(value, exp(log_weights), c(0.05, 0.95))$upper)
print(PIs)
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
ggplot(IS.long, aes(x = value, y = log_weights, color = name)) +
geom_point() +
facet_wrap(vars(name), scales = "free") +
labs(x = "Parameter Value", y = "Log-Weights", title = "Importance Sampling Log-Weights Distribution")
source("D:/R profile/2024 sms2 R workshops/Workshop Stat Computing/project01/script.R")
? pivot_longer
?? pivot_longer
? group_vy
? group_by
? summarise
# Modify this setup code chunk to set options
# or add extra packages etc if needed.
# See the project instructions for more details
# on what code to show, and where/how.
# Set default code chunk options
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE
)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(mvtnorm))
theme_set(theme_bw())
# To give the same random number sequence every time the document is knit:ed,
# making it easier to discuss the specific numbers in the text:
set.seed(12345L)
# Do not change this code chunk
# Load function definitions
source("code.R")
load("filament1.rda")
any(is.na(filament1))
summary(filament1[, c("CAD_Weight", "Actual_Weight")])
material.freq <- filament1 %>%
group_by(Material) %>%
summarise(freq = n()) %>%
mutate(percent = freq / sum(freq) * 100)
ggplot(material.freq, aes(x = "", y = freq, fill = Material, label = paste0(round(percent), "%"))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5)) +
theme_void() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Pie Chart of Material", fill = "Material")
ggplot(filament1, aes(x = CAD_Weight, y = Actual_Weight)) +
geom_point(color = "blue") +
labs(title = "CAD Weight vs. Actual Weight", x = "CAD Weight", y = "Actual Weight")
cor(filament1[, c("CAD_Weight", "Actual_Weight")])
ggplot(filament1, aes(x = Material, y = CAD_Weight, fill = Material)) +
geom_boxplot() +
scale_fill_manual(values = c("grey", "green", "magenta", "blue", "pink", "red"),
guide = guide_legend(title = "Material Type")) +
labs(title = "Boxplot of CAD Weight by Material", x = "Material", y = "CAD Weight")
anova <- aov(CAD_Weight ~ Material, data = filament1)
summary(anova)
fit_A = filament1_estimate(data = filament1, model = "A")
print(fit_A)
fit_B = filament1_estimate(data = filament1, model = "B")
print(fit_B)
alpha <- 0.1
t_value <- qt(1 - alpha / 2, 82)
fit_A = filament1_estimate(data = filament1, model = "A")
se_A <- sqrt(diag(solve(fit_A$hessian)))
lower_A <- fit_A$optimal - t_value * se_A
upper_A <- fit_A$optimal + t_value * se_A
width_A <- upper_A - lower_A
CIs_A <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value =  fit_A$optimal,
Lower = lower_A, Upper = upper_A,
Width = width_A)
knitr::kable(CIs_A)
fit_B = filament1_estimate(data = filament1, model = "B")
se_B <- sqrt(diag(solve(fit_B$hessian)))
lower_B <- fit_B$optimal - t_value * se_B
upper_B <- fit_B$optimal + t_value * se_B
width_B <- upper_B - lower_B
CIs_B <- data.frame(Name = c('beta1', 'beta2', 'beta3', 'beta4'),
Value = fit_B$optimal,
Lower = lower_B, Upper = upper_B,
Width = width_B)
knitr::kable(CIs_B)
params <- rep(1, 4)
theta0 <- numeric(4)
fit_theta <- posterior_mode(theta0,
x = filament1$CAD_Weight, y = filament1$Actual_Weight,
params = params)
print(fit_theta)
N <- 10000
IS <- do_importance(N = N,
mu = fit_theta$mode, S = fit_theta$S,
x = filament1$CAD_Weight, y = filament1$Actual_Weight,
params = params)
print(IS[1:10, ])
sum(exp(IS$log_weights))
IS.long <- pivot_longer(IS, starts_with("beta"),
names_to = "name", values_to = "value")
ggplot(IS.long, aes(value)) +
stat_ewcdf(aes(weights = exp(log_weights), color = "Weighted"), geom = "step") +
stat_ecdf(aes(color = "Unweighted"), geom = "step") +
scale_color_manual(values = c("red", "blue"),
labels = c("Weighted", "Unweighted"),
guide = guide_legend(title = "ECDF Type")) +
facet_wrap(vars(name), scales = "free_x") +
theme(panel.spacing = unit(0.8, "lines")) +
labs(title = "ECDF of parameters with and without weights",
x = "Parameter Value",
y = "Cumulative Probability")
IS.grouped <- IS.long %>% group_by(name) # 4 groups
PIs <- IS.grouped %>% summarise(lower = make_CI(value, exp(log_weights), c(0.05, 0.95))$lower,
upper = make_CI(value, exp(log_weights), c(0.05, 0.95))$upper)
print(PIs)
PIs$estimation <- c(fit_theta$mode[1], fit_theta$mode[2], exp(fit_theta$mode[3]), exp(fit_theta$mode[4]))
ggplot(PIs, aes(x = name, y = estimation)) +
geom_point(aes(color = "Estimation"), size = 2.5) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = "Prediction Interval"), width = 0.25) +
scale_color_manual(values = c("blue", "red"),
labels = c("Estimation", "Prediction Interval")) +
labs(x = "Parameters", y = "Estimattion", title = "Prediction Intervals based on Point Estimations")
ggplot(IS.long, aes(x = value, y = log_weights, color = name)) +
geom_point() +
facet_wrap(vars(name), scales = "free") +
labs(x = "Parameter Value", y = "Log-Weights", title = "Importance Sampling Log-Weights Distribution")
styler:::style_active_file()
setwd("D:/R profile/2024 sms2 R workshops/Workshop Applied Stat/Assignment")
